/*
 * generated by Xtext 2.37.0
 */
package forml.validation

import org.eclipse.xtext.validation.ComposedChecks

import forml.forml.DefinedClass
import forml.forml.FormlPackage
import forml.forml.Model
import java.util.HashSet
import org.eclipse.xtext.validation.Check
import forml.validation.FormlNameValidator
import forml.validation.FormlEndNameValidator

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */

@ComposedChecks(validators = #[FormlEndNameValidator, FormlNameValidator])

class FormlValidator extends AbstractFormlValidator {
	
	protected static val ISSUE_PREFIX = 'forml.'

/**
 * Name 
 *
 */
/**
 * Extension cycles 
 *
 */
	def void collectExtendedModels(HashSet<Model> collectedModels, HashSet<Model> visitedModels, Model m) {
		if (!visitedModels.contains(m)) {
			visitedModels.add(m)
			if (!collectedModels.contains(m)) collectedModels.add(m)
			if (m.extendedModels !== null)
				for (extendedModel : m.extendedModels) 
					collectExtendedModels(collectedModels, visitedModels, extendedModel.model)
		}		
	}
 
	@Check
	def checkModelNotInExtensionClosure(Model m) {
		if (m.extendedModels === null)
			return // nothing to check
			
		val HashSet<Model> collectedModels = newHashSet
		val HashSet<Model> visitedModels = newHashSet
		for (extendedModel : m.extendedModels) 
			collectExtendedModels(collectedModels, visitedModels, extendedModel.model)
		
		if (collectedModels.contains(m)) 
			error(
				"Cycle in hierarchy extension of model '" + m.name + "'",
				FormlPackage.eINSTANCE.model_ExtendedModels)
	}
	
	def void collectExtendedClasses(HashSet<DefinedClass> collectedClasses, HashSet<DefinedClass> visitedClasses, DefinedClass c) {
		if (!visitedClasses.contains(c)) {
			visitedClasses.add(c)
			if (!collectedClasses.contains(c)) collectedClasses.add(c)
			if (c.extendedClasses !== null)
				for (extendedClass : c.extendedClasses) 
					if (extendedClass.definedClass !== null)
						collectExtendedClasses(collectedClasses, visitedClasses, extendedClass.definedClass)
		}		
	}
 
	@Check
	def checkClasslNotInExtensionClosure(DefinedClass c) {
		if (c.extendedClasses === null)
			return // nothing to check
			
		val HashSet<DefinedClass> collectedClasses = newHashSet
		val HashSet<DefinedClass> visitedClasses = newHashSet
		for (extendedClass : c.extendedClasses) 
			collectExtendedClasses(collectedClasses, visitedClasses, extendedClass.definedClass)
		
		if (collectedClasses.contains(c)) 
			error(
				"Cycle in hierarchy extension of class '" + c.name + "'",
				FormlPackage.eINSTANCE.definedClass_ExtendedClasses)
	}
}
