/*
 * generated by Xtext 2.37.0
 */
package forml.tests

// 29 January 2025

import com.google.inject.Inject
import forml.forml.Models
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(FormlInjectorProvider)

class FormlParsingTest {
	@Inject
	ParseHelper<Models> parseHelper
	
	@Test
	def void Test01_01() {
		val result = parseHelper.parse('''
			Model TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_02() {
		val result = parseHelper.parse('''
			Model TestModel begin end;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_03() {
		val result = parseHelper.parse('''
			Model TestModel: Integer a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_04() {
		val result = parseHelper.parse('''
			Model TestModel begin end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_05() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Boolean b;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_06() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Boolean b;
				Integer a;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_07() {
		val result = parseHelper.parse('''
			Model Standard;
			Model TestModel extends Standard begin 
				Boolean b;
				Integer a;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_08() {
		val result = parseHelper.parse('''
			Model OtherModel;
			
			Model TestModel extends Standard, OtherModel begin 
				Boolean b;
				Integer a;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_09() {
		val result = parseHelper.parse('''
			Model testModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
	}
	
	@Test
	def void Test01_10() {
		val result = parseHelper.parse('''
			Model testModel "comment";
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
	}
	
	@Test
	def void Test01_11() {
		val result = parseHelper.parse('''
			Model testModel "comment" "other comment";
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')	
	}
	
	@Test
	def void Test01_12() {
		val result = parseHelper.parse('''
			Model Standard;
			Model TestModel "comment" "other comment" extends Standard begin 
				Boolean b;
				Integer a;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_13() {
		val result = parseHelper.parse('''
			Model Standard;
			Model TestModel "comment" "other comment" extends Standard "another" "comment" begin 
				Boolean b;
				Integer a;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test01_14() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Boolean b;
				"comment"
				"other comment"
				Integer a;
				"yet another comment"
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test02_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				Real r6 is 16.;
				Real r7 is 5.2;
				Real r4 is .59;
				Real real1 is 24e12;
				Real real2 is 1E-2;
				Real real3 is 1e-3;
				Real r8 is 8.3e6;
				Real r9 is .1E-2;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test03_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				partial Model Partial;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test03_02() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				partial Model Partial "comment";
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test03_03() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				partial Model Partial "comment" "other comment";
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test03_04() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				partial Model Partial: Integer i;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test03_05() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				partial Model Partial "coment": Integer i;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test03_06() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Real r5 is 5;
				partial Model Partial "comment" begin
					Integer i;
					end;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class Client;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_02() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				external Class Client;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_03() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				main Class Division;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_04() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				abstract Class Idea;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_05() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				private Class Protected;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_06() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				private main Class Protected;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test04_07() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				abstract private main Class Protected;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test05_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class #Client;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test05_02() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class @Command;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test05_03() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class !phase;
				Class ?const;
				Class ~nonFormal;
				Class ^notConcrete;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test06_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Enumeration [slow, rebound] Degraded;
				Enumeration [stuckOpen, stuckClose, stuckAsIs] Failed;
				Enumeration [nominal, Degraded degraded, Failed failed] OpState;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test07_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class Client;
				Client client1;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test07_02() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class Motor;
				Class Pump;
				Motor, Pump motoPump;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test08_01() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class Client;
				external Client client1;
				main Object bps;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test08_02() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				constant Integer i;
				fixed Real r;
				external constant Integer k;
				private constant Integer i;
				fixed private Real r;
				constant private external String s;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test08_03() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class Client;
				external Client client1 begin
					Integer i is 0;
					Boolean b;
					Class C;
				end client1;
				main Object bps;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void Test08_04() {
		val result = parseHelper.parse('''
			Model TestModel begin 
				Class Client;
				external Client client1 : Integer i is 0;
				main Object bps;
			end TestModel;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
